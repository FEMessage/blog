(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{232:function(t,e,a){"use strict";a.r(e);var n=a(2),s=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"解码base64的utf-8字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解码base64的utf-8字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 解码base64的utf-8字符串")]),t._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景","aria-hidden":"true"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),a("p",[t._v("后台传来经过 base64 编码的字符串(原始字符串含有中文), 需要在前端进行解码。")]),t._v(" "),a("p",[t._v("但 js 中的 "),a("code",[t._v("atob")]),t._v(" 解码方法不支持 unicode 字符集(btoa 也是), 换言之, 中文被解码出来是会乱码的, 那怎么办呢? 此时就要用到今天介绍的方法了.")]),t._v(" "),a("h2",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案","aria-hidden":"true"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用utf-8字符集进行base64编码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("utoa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("btoa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unescape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用utf-8字符集解析base64字符串 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("atou")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("atob")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("只需要调用"),a("code",[t._v("atou")]),t._v("函数, 即可解析后台传来的含有中文的base64编码字符串了")]),t._v(" "),a("h2",{attrs:{id:"分析atou"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析atou","aria-hidden":"true"}},[t._v("#")]),t._v(" 分析atou")]),t._v(" "),a("p",[t._v("其实上述方法在"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),a("OutboundLink")],1),t._v("中已有介绍, 但却没有讲明原理, 下面将分析要点")]),t._v(" "),a("p",[t._v("先来分析"),a("code",[t._v("atou")]),t._v("函数")]),t._v(" "),a("p",[t._v("其实该函数的关键是做了一个拉丁字符到utf-8字符的转换.")]),t._v(" "),a("p",[t._v("为什么这么说呢? 因为atob函数使用的是拉丁字符集, 而decodeURIComponent使用的是utf-8字符集")]),t._v(" "),a("p",[t._v("此时调用escape函数, 则会对拉丁字符集文本进行百分号编码(percent-encoding), 简单来说就是非ASCII字符如"),a("code",[t._v("È")]),t._v("(拉丁字符, 上面有个点的E), 它的在字符集中对应的十六进制字节为"),a("code",[t._v("0xC8")]),t._v(", 则其百分号编码为"),a("code",[t._v("%C8")]),t._v(", ASCII字符如[0-9a-z]则不需要转换")]),t._v(" "),a("p",[t._v("最后再调用decodeURIComponent函数, 它会将百分号编码的字符串解析成utf-8字符集的字符串, 则window.atob返回的拉丁文就变成unicode文字了, 中文也就可以显示出来了")]),t._v(" "),a("p",[t._v("这样讲可能有点难懂, 下面举个简单的例子")]),t._v(" "),a("h2",{attrs:{id:"例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子","aria-hidden":"true"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),a("p",[t._v("以中文"),a("code",[t._v("人")]),t._v("字为例, 其对应的base64编码为"),a("code",[t._v("5Lq6")])]),t._v(" "),a("ol",[a("li",[t._v("首先对其解码 "),a("code",[t._v("window.atob('5Lq6')")]),t._v(" 的结果为拉丁字符串 "),a("code",[t._v("äºº")])]),t._v(" "),a("li",[t._v("使用escape对拉丁字符串进行百分号编码, 也可以理解成把字符串翻译成拉丁字符集中对应的十六进制符号, "),a("code",[t._v("escape('äºº')")]),t._v(" 结果为 "),a("code",[t._v("%E4%BA%BA")])]),t._v(" "),a("li",[t._v("使用decodeURIComponent解析百分号编码字符串, 相当于把十六进制符号翻译成utf-8字符集中对应的字符, "),a("code",[t._v("decodeURIComponent('%E4%BA%BA')")]),t._v(" 结果为 "),a("code",[t._v("人")]),t._v(", 则原始的中文字就被正确的解析出来了!")])]),t._v(" "),a("h2",{attrs:{id:"分析utoa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析utoa","aria-hidden":"true"}},[t._v("#")]),t._v(" 分析utoa")]),t._v(" "),a("p",[t._v("因为atou要用到escape以及decodeURIComponent函数, 则很容易理解utoa要用与之相对应的unescape以及encodeURIComponent函数.")]),t._v(" "),a("p",[t._v("但其实事情可以有点微妙的变化.")]),t._v(" "),a("p",[t._v("如果base64的编码与解析全是由自己控制的, 且代码仅在js环境下运行, 那么可以不需要escape/unescape函数, utoa方法可以改写为")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("utoa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("btoa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("因为encodeURIComponent函数是使用utf-8字符集的, 输出的结果是字符串对应的百分号编码, 而百分号编码是在ASCII码范围内, btoa函数当然可以识别, 则上面的写法也是可行的")]),t._v(" "),a("p",[t._v("只不过它有一个明显的缺点, 那就是这样编码出来的字符串变长了")]),t._v(" "),a("h2",{attrs:{id:"提问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提问","aria-hidden":"true"}},[t._v("#")]),t._v(" 提问")]),t._v(" "),a("h3",{attrs:{id:"如何评价上述黑魔法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何评价上述黑魔法","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何评价上述黑魔法?")]),t._v(" "),a("p",[t._v("我认为这种方法的优点是, 使用的全是js内置的函数, 不需要借助第三类库, 对于有洁癖的同学来说(比如说我), 更容易接受.")]),t._v(" "),a("p",[t._v("缺点的话, 可能是使用了escape/unescape函数, 这两个函数不被标准推荐使用, 不过我认为那是针对URI进行编码解码的场景, 这里escape/unescape并不用于URI的编码与解码, 并没有用错地方. 只不过因为不鼓励使用, 未来有可能不被浏览器实现, 但我觉得浏览器开发商为了兼容性, 短时间内并不会这样做")]),t._v(" "),a("h3",{attrs:{id:"是否可以使用-encodeuri-decodeuri-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可以使用-encodeuri-decodeuri-函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 是否可以使用 encodeURI/decodeURI 函数?")]),t._v(" "),a("p",[t._v("答案是可以的.")]),t._v(" "),a("p",[t._v("简单来说, encodeURI与encodeURIComponent的区别在于, 后者编码得彻底, 也即URI符号的编码粒度更细. 比如URI中常见的符号"),a("code",[t._v("=")]),t._v(", "),a("code",[t._v("encodeURI('=')")]),t._v("的结果是"),a("code",[t._v("=")]),t._v(", 而"),a("code",[t._v("encodeURIComponent('=')")]),t._v("的结果是"),a("code",[t._v("%3D")]),t._v(". encodeURI/decodeURI函数同样使用的是utf-8字符集, 所以粒度的不同并不影响结果.")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-btoa-usage"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://ecmanaut.blogspot.jp/2006/07/encoding-decoding-utf8-in-javascript.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("encoding-decoding-utf8-in-javascript"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://monsur.hossa.in/2012/07/20/utf-8-in-javascript.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("delve-into-encode_utf8-function"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cnblogs.com/DaoMuRen/p/5695030.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("percent-encoding"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-encodeURIComponent"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-escape"),a("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=s.exports}}]);